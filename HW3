"""
@author: Mane
"""
##### Design stack, LIFO

class Stack:
     def __init__(self):
         self.l = []

     def is_empty(self):
         return self.l == []

     def push(self, new):
         self.l.append(new)

     def pop(self):
         if self.is_empty():
            return None
         return self.l.pop()

     def size(self):
         return len(self.l)

#### test validity
s=Stack()
print(s.is_empty())
s.push(5)
s.push('hello')
#print(s.peek())
s.push(67)
print(s.size())
print(s.is_empty())
s.push('world')
print(s.l)
print(s.pop())
print(s.pop())
print(s.size())

######### Problem 2: balanced brackets

def check_brackets(Str):
    l=list(Str)
    b=Stack()
    for i in range(len(l)):
        if l[i] == '{' or l[i] == '(' or l[i] == '[' or l[i] == '<':
            b.push(l[i]) 
        elif l[i] == '}' or l[i] == ')' or l[i] == ']' or l[i] == '>':
            if b.size() == 0:
                return False
            last = b.pop() 
            if not true_order(last, l[i]):
                return False
    if b.size() != 0:
        return False       
    return True

def true_order(open, close):
    if open == '(' and close == ')':
        return True
    elif open == '[' and close == ']':
        return True
    elif open == '{' and close == '}':
        return True  
    elif open == '<' and close == '>':
        return True
    else:
        return False

# Test function 
z = input("input String: " )
print(check_brackets(z))
