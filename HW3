"""
@author: Mane
"""
##### Design stack, LIFO

class Stack:
     def __init__(self):
         self.l = []

     def is_empty(self):
         return self.l == []

     def push(self, new):
         self.l.append(new)

     def pop(self):
         if self.is_empty():
            return None
         return self.l.pop()

     def size(self):
         return len(self.l)

#### test validity
s=Stack()
print(s.is_empty())
s.push(5)
s.push('hello')
#print(s.peek())
s.push(67)
print(s.size())
print(s.is_empty())
s.push('world')
print(s.l)
print(s.pop())
print(s.pop())
print(s.size())

######### Problem 2: balanced brackets

def check_brackets(Str):
    l=list(Str)
    b=Stack()
    for i in range(len(l)):
        if l[i] == '{' or l[i] == '(' or l[i] == '[' or l[i] == '<':
            b.push(l[i]) 
        elif l[i] == '}' or l[i] == ')' or l[i] == ']' or l[i] == '>':
            if b.size() == 0:
                return False
            last = b.pop() 
            if not true_order(last, l[i]):
                return False
    if b.size() != 0:
        return False       
    return True

def true_order(open, close):
    if open == '(' and close == ')':
        return True
    elif open == '[' and close == ']':
        return True
    elif open == '{' and close == '}':
        return True  
    elif open == '<' and close == '>':
        return True
    else:
        return False

# Test function 
z = input("input String: " )
print(check_brackets(z))


###Problem 3: Stack with getMIn() in O(1)

"""
 we are going to create a new stack (Stack with getMin)
 which will inherit ordinary Stack's all properties by using function super() 
 and will also cointain a slack of Mins: 
 i.e when new value will be added toour main stack_with_getMIn,
 this value will be compared with the last value af the stack and 
 if it is the min, it will be pushed to stack of Mins, otherwise
 we will push same last value of Mins stack again to Mins stack.  
 Also, when deleteing the last value from main stack, 
 that value should be deleted from Mins stack as well
"""
class Stack_with_getMin(Stack):
     def __init__(self):
         super().__init__()
         self.Min=Stack()

     def push(self, last):
         if self.is_empty():
             super().push(last)
             self.Min.push(last)
         else:
             super().push(last)
             min = self.Min.pop()
             self.Min.push(min)
             if last <= min:
                 self.Min.push(last)
             else:
                 self.Min.push(min)
                 
     def pop(self):
         last = super().pop()
         self.Min.pop()
         return last
 
     def getMin(self):
         last = self.Min.pop()
         self.Min.push(last)
         return last

#### test validity
s = Stack_with_getMin()
s.push(24)
s.push(11)
s.push(35)
print(s.getMin())
s.push(8)
print(s.getMin())
